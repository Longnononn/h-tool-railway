import os
import discord
from deep_translator import GoogleTranslator
from openai import OpenAI
from dotenv import load_dotenv

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env n·∫øu c√≥
load_dotenv()

# --- 1. C·∫•u h√¨nh & Bi·∫øn m√¥i tr∆∞·ªùng ---
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
HUGGINGFACE_TOKEN = os.getenv("HF_TOKEN")

# Kh·ªüi t·∫°o client OpenRouter
try:
    openrouter_client = OpenAI(
        base_url="https://router.huggingface.co/v1",
        api_key=HUGGINGFACE_TOKEN,
    )
except Exception as e:
    print(f"L·ªói kh·ªüi t·∫°o client OpenRouter: {e}")
    openrouter_client = None

# Kh·ªüi t·∫°o Google Translate
translator = GoogleTranslator(source='auto', target='vi')

# C·∫•u h√¨nh Discord client
intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)

# --- 2. H√†m ch√≠nh ---
async def ask_huggingface(prompt):
    """G·ª≠i y√™u c·∫ßu ƒë·∫øn Hugging Face (qua OpenRouter) v√† d·ªãch c√¢u tr·∫£ l·ªùi."""
    if not openrouter_client:
        return "‚ö†Ô∏è L·ªói: Client OpenRouter ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng ki·ªÉm tra l·∫°i token."
    
    try:
        completion = openrouter_client.chat.completions.create(
            model="openai/gpt-oss-120b:cerebras",
            messages=[
                {"role": "user", "content": prompt}
            ],
        )
        raw_reply = completion.choices[0].message.content.strip()
        
        # Deep Translator t·ª± ƒë·ªông d·ªãch
        translated = translator.translate(raw_reply)
        return translated
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói t·ª´ Hugging Face: {e}"

# --- 3. C√°c s·ª± ki·ªán Discord ---
@client.event
async def on_ready():
    print(f"ü§ñ Bot ƒë√£ s·∫µn s√†ng: {client.user}")

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    async with message.channel.typing():
        reply = await ask_huggingface(message.content)
        await message.channel.send(reply)

# Ch·∫°y bot
if __name__ == "__main__":
    client.run(DISCORD_TOKEN)
